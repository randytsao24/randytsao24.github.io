{"version":3,"sources":["components/Header.js","components/Personal.js","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["initStyles","makeStyles","theme","headerBar","backgroundColor","borderBottom","width","headerText","textDecoration","Header","classes","Toolbar","className","Typography","variant","infoGridDiv","margin","spacing","infoGridContainer","flexGrow","infoCard","padding","fontSize","textAlign","color","palette","text","primary","Personal","Grid","container","item","xs","Paper","href","target","sm","style","homepageBox","display","flexDirection","justifyContent","alignItems","Homepage","useEffect","console","log","Box","component","appContainer","border","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32aef74f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst initStyles = makeStyles(theme => ({\r\n  headerBar: {\r\n    backgroundColor: '#b3e4df',\r\n    borderBottom: '1px solid black',\r\n    width: '100%'\r\n  },\r\n  headerText: {\r\n    textDecoration: 'underline'\r\n  }\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = initStyles();\r\n  const { headerBar, headerText } = classes;\r\n\r\n  return (\r\n    <Toolbar className={headerBar}>\r\n      <Typography className={headerText} variant=\"h6\">\r\n        Randy Tsao\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst initStyles = makeStyles(theme => ({\r\n  infoGridDiv: {\r\n    width: '100%',\r\n    margin: theme.spacing(2)\r\n  },\r\n  infoGridContainer: {\r\n    flexGrow: 1\r\n  },\r\n  infoCard: {\r\n    padding: theme.spacing(2),\r\n    fontSize: 14,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary\r\n  }\r\n}));\r\n\r\nconst Personal = () => {\r\n  const classes = initStyles();\r\n  const { infoCard, infoGridContainer, infoGridDiv } = classes;\r\n\r\n  return (\r\n    <div className={infoGridDiv}>\r\n      <Grid className={infoGridContainer} container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper className={infoCard} variant=\"outlined\">\r\n            I'm a software engineer raised in Southern California and based in Brooklyn, and I want to help make cool things with other people.\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper className={infoCard} variant=\"outlined\">\r\n            Reach out to me at <a href=\"mailto:randytsao24@gmail.com\" target=\"_top\">randytsao24@gmail.com</a>, check out my work info at my <a href=\"https://www.linkedin.com/in/randy-tsao/\" target=\"_top\">LinkedIn</a>, or see some really outdated repos at my <a href=\"https://github.com/randytsao24\" target=\"_top\">GitHub</a>.\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper className={infoCard} variant=\"outlined\">\r\n            I'm currently most proficient in full stack, JavaScript-based web app development.\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper className={infoCard} variant=\"outlined\">\r\n            Technologies relating to that include Node, React, Angular, MongoDB, Postgres, and AWS (Lambda/EB/Step Functions).\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper className={infoCard} variant=\"outlined\">\r\n            Even though I am the kind of person that works to live, I am grateful for software engineering allowing me the opportunity to work with brilliant, talented people and I look forward to many more such experiences.\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper style={{ backgroundColor: '#9DD9F3' }} className={infoCard} variant=\"outlined\">\r\n            Thanks for coming on here and take it easy. :)\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Personal;\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport Header from './Header';\r\nimport Personal from './Personal';\r\n\r\n// import '../styles/Homepage.css';\r\nconst initStyles = makeStyles(theme => ({\r\n  homepageBox: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  }\r\n}));\r\n\r\nconst Homepage = () => {\r\n  const classes = initStyles();\r\n  const { homepageBox } = classes;\r\n\r\n  useEffect(() => {\r\n    console.log('Homepage loaded!');\r\n  }, []);\r\n\r\n  return (\r\n    <Box className={homepageBox} component=\"div\">\r\n      <Header />\r\n      <Personal />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport Homepage from './components/Homepage';\r\n\r\nconst initStyles = makeStyles(theme => ({\r\n  appContainer: {\r\n    border: '1px solid black'\r\n  }\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = initStyles();\r\n  const { appContainer } = classes;\r\n\r\n  return (\r\n    <Container className={appContainer} maxWidth=\"md\">\r\n      <Homepage />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}